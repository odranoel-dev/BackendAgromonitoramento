üî∏ 1. Entidade (Model)
Nome: Usuario

Fun√ß√£o: Representa o usu√°rio no banco de dados. Ter√° os campos como ID, nome de usu√°rio e senha (criptografada).



üî∏ 2. Reposit√≥rio
Nome: UsuarioRepository

Fun√ß√£o: Interface que se comunica com o banco. Permite salvar, buscar, deletar e atualizar usu√°rios de forma simples usando JPA.



üî∏ 3. DTOs (Data Transfer Object)
Nome: UsuarioRequestDTO

Fun√ß√£o: Representa os dados recebidos do front-end no cadastro (ex: username e senha).

Nome: LoginRequestDTO

Fun√ß√£o: Representa os dados recebidos no momento do login (ex: username e senha para valida√ß√£o).

-->Um DTO em Java √© um objeto usado para transferir dados entre camadas da aplica√ß√£o, servindo como
filtro para que apenas as informa√ß√µes necess√°rias ‚Äî geralmente vindas do frontend ‚Äî sejam recebidas
ou enviadas pelo backend."

üî∏ 4. Servi√ßo (Service)
Nome: UsuarioService

Fun√ß√£o: Cont√©m a l√≥gica de neg√≥cio, como cadastrar usu√°rio (com senha criptografada com bcrypt) e validar login (comparar senha enviada com a senha criptografada do banco).



üî∏ 5. Controlador (Controller)
Nome: UsuarioController

Fun√ß√£o: Expor as rotas HTTP (endpoints) para o front-end, como:

POST /api/usuarios/cadastrar

POST /api/usuarios/login



üî∏ 6. Configura√ß√£o
Nome: SecurityConfig

Fun√ß√£o: Define configura√ß√µes de seguran√ßa como o uso do BCrypt para codificar a senha.



PF E PJ
pf - nome completo, telefones, e-mail, senha, data nasc
pj - raz√£o social, cnpj, responsavel, e-mail, senha, telefone obrigat√≥rio
Ap√≥s login ter a op√ß√£o de cadastrar fazenda e telefones.

PJ -  ter acesso a 3 telefones e PF acesso a um unico telefone.


git branch
git add .
git commit -m "mensagem"
git push origin develop



cria o container do arquivo docker-compose.yml
docker-compose up -d

verificar quais containers est√£o rodando
docker ps

