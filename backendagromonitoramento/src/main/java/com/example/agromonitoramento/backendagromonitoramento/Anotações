ğŸ”¸ 1. Entidade (Model)
Nome: Usuario

FunÃ§Ã£o: Representa o usuÃ¡rio no banco de dados. TerÃ¡ os campos como ID, nome de usuÃ¡rio e senha (criptografada).



ğŸ”¸ 2. RepositÃ³rio
Nome: UsuarioRepository

FunÃ§Ã£o: Interface que se comunica com o banco. Permite salvar, buscar, deletar e atualizar usuÃ¡rios de forma simples usando JPA.



ğŸ”¸ 3. DTOs (Data Transfer Object)
Nome: UsuarioRequestDTO

FunÃ§Ã£o: Representa os dados recebidos do front-end no cadastro (ex: username e senha).

Nome: LoginRequestDTO

FunÃ§Ã£o: Representa os dados recebidos no momento do login (ex: username e senha para validaÃ§Ã£o).

-->Um DTO em Java Ã© um objeto usado para transferir dados entre camadas da aplicaÃ§Ã£o, servindo como
filtro para que apenas as informaÃ§Ãµes necessÃ¡rias â€” geralmente vindas do frontend â€” sejam recebidas
ou enviadas pelo backend."

ğŸ”¸ 4. ServiÃ§o (Service)
Nome: UsuarioService

FunÃ§Ã£o: ContÃ©m a lÃ³gica de negÃ³cio, como cadastrar usuÃ¡rio (com senha criptografada com bcrypt) e validar login (comparar senha enviada com a senha criptografada do banco).



ğŸ”¸ 5. Controlador (Controller)
Nome: UsuarioController

FunÃ§Ã£o: Expor as rotas HTTP (endpoints) para o front-end, como:

POST /api/usuarios/cadastrar

POST /api/usuarios/login



ğŸ”¸ 6. ConfiguraÃ§Ã£o
Nome: SecurityConfig

FunÃ§Ã£o: Define configuraÃ§Ãµes de seguranÃ§a como o uso do BCrypt para codificar a senha.